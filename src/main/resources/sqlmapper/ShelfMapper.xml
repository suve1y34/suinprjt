<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.kr.sikim.suinproject.mapper.ShelfMapper">
    <resultMap id="ShelfItemMap" type="co.kr.sikim.suinproject.domain.ShelfItemJoinRow">
        <id     column="shelf_book_id"      property="shelfBookId"/>
        <result column="bookshelf_id"       property="bookshelfId"/>
        <result column="book_id"            property="bookId"/>
        <result column="isbn13_code"        property="isbn13Code"/>
        <result column="title"              property="title"/>
        <result column="author"             property="author"/>
        <result column="pages"              property="pages"/>
        <result column="cover_image_url"    property="coverImageUrl"/>
        <result column="current_page"       property="currentPage"/>
        <result property="startDate"        column="start_date"/>
        <result property="endDate"          column="end_date"/>
        <result column="reading_status"     property="readingStatus"/>
        <result column="memo"               property="memo"/>
        <result column="memo_visibility"    property="memoVisibility"/>
        <result property="review"           column="review"/>
        <result property="reviewVisibility" column="review_visibility"/>
        <result column="added_datetime"     property="addedDatetime"/>
        <result column="modified_datetime"  property="modifiedDatetime"/>
    </resultMap>

    <resultMap id="ShelfMap" type="co.kr.sikim.suinproject.domain.Bookshelf">
        <id     column="bookshelf_id"        property="bookshelfId"/>
        <result column="user_id"             property="userId"/>
        <result column="created_datetime"    property="createdDatetime"/>
    </resultMap>

    <insert id="insertBookshelf" parameterType="co.kr.sikim.suinproject.domain.Bookshelf"
            useGeneratedKeys="true" keyProperty="bookshelfId">
        INSERT INTO bookshelf (user_id) VALUES (#{userId})
    </insert>

    <insert id="insertShelfItem" parameterType="co.kr.sikim.suinproject.domain.ShelfItem"
            useGeneratedKeys="true"
            keyProperty="shelfBookId"
            keyColumn="shelf_book_id">
        INSERT INTO shelf_book (
        bookshelf_id, book_id, current_page, start_date, end_date, reading_status, memo, memo_visibility, review, review_visibility
        )
        VALUES (
        #{bookshelfId},
        #{bookId},
        COALESCE(#{currentPage}, 0),
        #{startDate}, #{endDate},
        COALESCE(#{readingStatus}, 'PLAN'),
        #{memo},
        COALESCE(#{memoVisibility}, 'PRIVATE'),
        #{review},
        COALESCE(#{reviewVisibility}, 'PRIVATE')
        )
    </insert>

    <update id="updateShelfItem" parameterType="co.kr.sikim.suinproject.domain.ShelfItem">
        UPDATE shelf_book
        <set>
            modified_datetime = CURRENT_TIMESTAMP
            <if test="currentPage != null">, current_page = #{currentPage}</if>
            <if test="startDate != null">, start_date = #{startDate}</if>
            <if test="endDate != null">, end_date = #{endDate}</if>
            <if test="readingStatus != null">, reading_status = #{readingStatus}</if>
            <if test="memoChanged != null and memoChanged == true">, memo = #{memo}</if>
            <if test="memoVisibility != null">, memo_visibility = #{memoVisibility}</if>
            <if test="reviewChanged != null and reviewChanged == true">, review = #{review}</if>
            <if test="reviewVisibility != null and reviewVisibility != ''">, review_visibility = #{reviewVisibility}</if>

        </set>

        WHERE shelf_book_id = #{shelfBookId}
    </update>

    <delete id="deleteShelfItemById">
        DELETE FROM shelf_book WHERE shelf_book_id = #{shelfBookId}
    </delete>

    <select id="selectBookshelfById" resultMap="ShelfMap">
        SELECT bookshelf_id, user_id, created_datetime
        FROM bookshelf
        WHERE user_id = #{userId}
    </select>

    <select id="selectShelfItemById" resultMap="ShelfItemMap">
        SELECT
        sb.shelf_book_id,
        sb.bookshelf_id,
        sb.book_id,
        sb.current_page,
        sb.reading_status,
        sb.start_date,
        sb.end_date,
        sb.memo,
        sb.memo_visibility,
        sb.review,
        sb.review_visibility,
        sb.added_datetime,
        sb.modified_datetime,
        b.title, b.author, b.pages,
        b.cover_image_url,
        b.isbn13_code
        FROM
        shelf_book sb
        JOIN
        book b
        ON
        b.book_id = sb.book_id
        WHERE
        sb.shelf_book_id = #{shelfBookId}
    </select>

    <select id="selectShelfItemsByShelfId" resultMap="ShelfItemMap">
        SELECT
        sb.shelf_book_id,
        sb.bookshelf_id,
        sb.book_id,
        sb.current_page,
        sb.reading_status,
        sb.start_date,
        sb.end_date,
        sb.memo,
        sb.memo_visibility,
        sb.review,
        sb.review_visibility,
        sb.added_datetime,
        sb.modified_datetime,
        b.title, b.author, b.pages,
        b.cover_image_url,
        b.isbn13_code
        FROM
        shelf_book sb
        JOIN
        book b
        ON
        b.book_id = sb.book_id
        WHERE
        sb.bookshelf_id = #{bookshelfId}
        <if test="status != null and status != ''">
            AND sb.reading_status = #{status}
        </if>
        <if test="year != null">
            AND YEAR(sb.added_datetime) = #{year}
        </if>
        <if test="month != null">
            AND MONTH(sb.added_datetime) = #{month}
        </if>

        <!-- 키워드 검색 -->
        <if test="keyword != null and keyword != ''">
            AND (
            b.title  LIKE CONCAT('%', #{keyword}, '%')
            OR b.author LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'title'"> b.title </when>
            <when test="sort == 'pages'"> b.pages </when>
            <otherwise> sb.added_datetime </otherwise>
        </choose>
        <choose>
            <when test="order == 'asc'"> ASC </when>
            <otherwise> DESC </otherwise>
        </choose>
    </select>

    <!-- 상태별 개수 -->
    <select id="selectStatusCountsByUserId" parameterType="map" resultType="map">
        SELECT
        sb.reading_status AS status,
        COUNT(*) AS cnt
        FROM
        shelf_book sb
        JOIN
        bookshelf bs
        ON
        bs.bookshelf_id = sb.bookshelf_id
        WHERE
        bs.user_id = #{userId}
        GROUP BY
        sb.reading_status
    </select>

    <!-- 월별(완독) 개수: end_date 기준, 연도 필터(옵션) -->
    <select id="selectMonthlyDoneCountsByUserId" parameterType="map" resultType="map">
        SELECT
        YEAR(sb.end_date) AS y,
        MONTH(sb.end_date) AS m,
        COUNT(*) AS cnt
        FROM shelf_book sb
        JOIN bookshelf bs
        ON bs.bookshelf_id = sb.bookshelf_id
        WHERE
        bs.user_id = #{userId}
        AND
        sb.end_date IS NOT NULL
        AND
        (#{year} IS NULL OR YEAR(sb.end_date) = #{year})
        GROUP BY
        YEAR(sb.end_date), MONTH(sb.end_date)
        ORDER BY
        y, m
    </select>

    <select id="countShelfItems" resultType="int">
        SELECT
        COUNT(*)
        FROM
        shelf_book
        WHERE
        bookshelf_id = #{bookshelfId}
    </select>

    <select id="countShelfBooksByStatus" resultType="int">
        SELECT
        COUNT(*)
        FROM
        shelf_book sb
        JOIN
        bookshelf s
        ON
        sb.bookshelf_id = s.bookshelf_id
        WHERE
        s.user_id = #{userId}
        AND
        sb.reading_status = #{status}
    </select>

    <select id="existsBookshelfById" resultType="boolean">
        SELECT EXISTS(
        SELECT 1 FROM shelf_book
        WHERE bookshelf_id = #{bookshelfId}
        AND book_id = #{bookId}
        )
    </select>

    <select id="existBookshelfById" resultType="boolean">
        SELECT
        EXISTS(
        SELECT 1 FROM bookshelf WHERE bookshelf_id = #{bookshelfId}
        )
    </select>

    <select id="existsBookshelfOwnedByUser" resultType="boolean">
        SELECT
            CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM
            bookshelf
        WHERE
            bookshelf_id = #{bookshelfId}
        AND
            user_id = #{userId}
    </select>

    <select id="existsShelfItemOwnedByUser" resultType="boolean">
        SELECT
            CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
        FROM
            shelf_book sb
        JOIN
            bookshelf b
        ON
            b.bookshelf_id = sb.bookshelf_id
        WHERE
            sb.shelf_book_id = #{shelfBookId}
        AND
            b.user_id        = #{userId}
    </select>
</mapper>